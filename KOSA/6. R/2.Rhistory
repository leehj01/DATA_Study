iris
iris
library(iris)
library(reshape)
rename(iris2,c(y="species"))
iris
library(reshape)
data(iris)
iris
iris$value
names(iris)
head(iris)
tail(iris)
names(iris) <- c("a","b","c","d","e","f")
iris[0]
install.packages("reshape")
library(reshape)
X=iris[,-5]
y=iris[,5]
iris2<-cbind(X,y)
rename(iris2,c(y="species"))
head(subset(iris, subset = iris(Sepal.Length >= 5.0, select = c(1,2,3))))
head(subset(iris, subset = iris$Sepal.Length >= 5.0, select = c(1,2,3))))
head(subset(iris, subset = iris$Sepal.Length >= 5.0, select = c(1,2,3)))
ifelse(a>20,"20보다큼 ","20보다 작음")
?felse(a>20,"20보다큼 ","20보다 작음")
ifalse(a>20,"20보다큼 ","20보다 작음")
ifelse(a>20,"20보다큼 ","20보다 작음")
print(i)
for (i in  0:10){
print(i)
}
for (i in  1:10){
print(i)
}
for (i in  1:10){
print(i)
}
for (i in  8:10){
print(i)
}
i =i +1
repeat{
print("hello")
if (i>=10){
break
}
i =i +1
}
i =i +1
repeat{
print("hello")
if (i>=10){
break
}
i =i +1
}
repeat{
print("hello")
if (i>=10){
break
}
i =i +1
}
repeat{
print("hello")
if (i>=10){
break
}
i =i +1
}
if (i>=10){
break
}
repeat{
print("hello")
if (i>=10){
break
}
i =i +1
}
summary.iris
summary(iris)
cat(summary(iris),file = "iris.summary.txt")
tapply(iris$Sepal.Length, iris$Species, mean) #그룹핑
job <= c(2,3,4,5,2,2,3,5,2,4,4,6,3)
job <- c(2,3,4,5,2,2,3,5,2,4,4,6,3)
class(job)
job <- factor(job, levels = c(0:8))
class(job)
income <-c(4865,2346,0,453,23562,0,342,675,0,231,241,0,3525)
length(job)
length(class)
length(income)
tapply(income, job, mean)
taapply(incom, job, mean, defalt=-1)
taapply(incom, job, mean, defalt=-1)
tapply(incom, job, mean, defalt=-1)
tapply(income, job, mean, defalt=-1)
#파이썬은 statsmodels 패키지에서 OSL에서
install.packages("doBY")
#파이썬은 statsmodels 패키지에서 OSL에서
install.packages("doBy")
library(doBy)
head(orderBy(~Species, data=iris, frac=0.1))
head(orderBy(~Species + Sepal.Length, data=iris))
simpleBy(~Species, data=iris, frac=0.1,replace=T)
sampleBy(~Species, data=iris, frac=0.1,replace=T)
sampleBy(~Species, data=iris, frac=0.1,replace=T)
sampleBy(~Species, data=iris, frac=0.1,replace=T)
data(cars)
plot(cars)
lm(dist ~speed, cars)
abline(lm(dist~spped, cars))
abline(lm(dist~speed, cars))
abline(lm(dist~speed, cars))
abline(lm(dist~speed-1, cars), lty="dotted")
